name: 🤖 Auto-Fix CI/CD Workflows

on:
  workflow_run:
    # Monitor Azure Portal-generated workflows that might need fixing
    workflows: ['*fabrikam-*']
    types: [completed]
  workflow_dispatch:
    inputs:
      force_fix:
        description: 'Force fix all workflows'
        required: false
        default: 'false'
        type: boolean

jobs:
  detect-and-fix:
    # Only run if workflow failed or manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔍 Detect Azure Portal workflows
        id: detect
        run: |
          echo "🔍 Scanning for Azure Portal-generated workflows..."
          
          # Find workflows that match Azure Portal naming patterns
          AZURE_WORKFLOWS=""
          
          # Look for branch-specific workflows (feature-branch_appname-suffix.yml)
          if find .github/workflows -name "*_fabrikam-*-dev-*.yml" -type f 2>/dev/null | grep -q .; then
            AZURE_WORKFLOWS="$(find .github/workflows -name "*_fabrikam-*-dev-*.yml" -type f)"
          fi
          
          # Look for main branch workflows (main_appname-suffix.yml)  
          if find .github/workflows -name "main_fabrikam-*-dev-*.yml" -type f 2>/dev/null | grep -q .; then
            AZURE_WORKFLOWS="$AZURE_WORKFLOWS $(find .github/workflows -name "main_fabrikam-*-dev-*.yml" -type f)"
          fi
          
          # Remove extra spaces and newlines
          AZURE_WORKFLOWS=$(echo $AZURE_WORKFLOWS | tr '\n' ' ' | xargs)
          
          if [ -n "$AZURE_WORKFLOWS" ]; then
            echo "✅ Found workflows to check: $AZURE_WORKFLOWS"
            echo "found=true" >> $GITHUB_OUTPUT
            echo "workflows=$AZURE_WORKFLOWS" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No Azure Portal workflows found"
            echo "found=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 🛠️ Apply CIPP-inspired fixes
        if: steps.detect.outputs.found == 'true'
        run: |
          echo "🛠️ Applying CIPP-inspired monorepo fixes..."
          
          FIXED_COUNT=0
          
          for workflow_file in ${{ steps.detect.outputs.workflows }}; do
            echo "🔧 Processing: $workflow_file"
            
            # Check if file needs fixes
            NEEDS_FIX=false
            
            # Check for generic build commands that need project-specific paths
            if grep -q "dotnet build --configuration Release$" "$workflow_file"; then
              NEEDS_FIX=true
            fi
            
            if grep -q "dotnet publish -c Release -o" "$workflow_file"; then
              NEEDS_FIX=true
            fi
            
            # Check for hardcoded app names that need to be parameterized
            if grep -q "app-name: 'fabrikam-.*-dev-[a-zA-Z0-9]*'" "$workflow_file"; then
              NEEDS_FIX=true
            fi
            
            # Check for hardcoded secrets with random IDs
            if grep -q "AZUREAPPSERVICE_.*_[A-F0-9]\{32\}" "$workflow_file"; then
              NEEDS_FIX=true
            fi
            
            if [ "$NEEDS_FIX" = true ]; then
              echo "  📝 Applying CIPP-inspired fixes to $workflow_file..."
              
              # Determine if this is API or MCP workflow
              if [[ $(basename "$workflow_file") == *"api"* ]]; then
                echo "  🔧 Fixing API workflow..."
                
                # Fix build command
                sed -i 's|dotnet build --configuration Release$|dotnet build FabrikamApi/src/FabrikamApi.csproj --configuration Release|g' "$workflow_file"
                
                # Fix publish command  
                sed -i 's|dotnet publish -c Release -o \${{env\.DOTNET_ROOT}}/myapp|dotnet publish FabrikamApi/src/FabrikamApi.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp|g' "$workflow_file"
                
                # Fix hardcoded app name to use repository variable
                sed -i "s|app-name: 'fabrikam-api-dev-[a-zA-Z0-9]*'|app-name: \${{ vars.AZURE_API_APP_NAME \|\| 'fabrikam-api-dev' }}|g" "$workflow_file"
                
                # Fix hardcoded secrets to use flexible authentication
                sed -i 's|client-id: \${{ secrets\.AZUREAPPSERVICE_CLIENTID_[A-F0-9]\{32\} }}|client-id: \${{ secrets.AZURE_CLIENT_ID \|\| secrets.AZUREAPPSERVICE_CLIENTID }}|g' "$workflow_file"
                sed -i 's|tenant-id: \${{ secrets\.AZUREAPPSERVICE_TENANTID_[A-F0-9]\{32\} }}|tenant-id: \${{ secrets.AZURE_TENANT_ID \|\| secrets.AZUREAPPSERVICE_TENANTID }}|g' "$workflow_file"
                sed -i 's|subscription-id: \${{ secrets\.AZUREAPPSERVICE_SUBSCRIPTIONID_[A-F0-9]\{32\} }}|subscription-id: \${{ secrets.AZURE_SUBSCRIPTION_ID \|\| secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}|g' "$workflow_file"
                
              elif [[ $(basename "$workflow_file") == *"mcp"* ]]; then
                echo "  🔧 Fixing MCP workflow..."
                
                # Fix build command
                sed -i 's|dotnet build --configuration Release$|dotnet build FabrikamMcp/src/FabrikamMcp.csproj --configuration Release|g' "$workflow_file"
                
                # Fix publish command
                sed -i 's|dotnet publish -c Release -o \${{env\.DOTNET_ROOT}}/myapp|dotnet publish FabrikamMcp/src/FabrikamMcp.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp|g' "$workflow_file"
                
                # Fix hardcoded app name to use repository variable
                sed -i "s|app-name: 'fabrikam-mcp-dev-[a-zA-Z0-9]*'|app-name: \${{ vars.AZURE_MCP_APP_NAME \|\| 'fabrikam-mcp-dev' }}|g" "$workflow_file"
                
                # Fix hardcoded secrets to use flexible authentication
                sed -i 's|client-id: \${{ secrets\.AZUREAPPSERVICE_CLIENTID_[A-F0-9]\{32\} }}|client-id: \${{ secrets.AZURE_CLIENT_ID \|\| secrets.AZUREAPPSERVICE_CLIENTID }}|g' "$workflow_file"
                sed -i 's|tenant-id: \${{ secrets\.AZUREAPPSERVICE_TENANTID_[A-F0-9]\{32\} }}|tenant-id: \${{ secrets.AZURE_TENANT_ID \|\| secrets.AZUREAPPSERVICE_TENANTID }}|g' "$workflow_file"
                sed -i 's|subscription-id: \${{ secrets\.AZUREAPPSERVICE_SUBSCRIPTIONID_[A-F0-9]\{32\} }}|subscription-id: \${{ secrets.AZURE_SUBSCRIPTION_ID \|\| secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}|g' "$workflow_file"
                
              else
                echo "  ⚠️ Unknown workflow type for $workflow_file"
              fi
              
              FIXED_COUNT=$((FIXED_COUNT + 1))
              echo "  ✅ Fixed: $(basename $workflow_file)"
              
            else
              echo "  ℹ️ No fixes needed for $(basename $workflow_file)"
            fi
          done
          
          echo "FIXED_COUNT=$FIXED_COUNT" >> $GITHUB_ENV
          
      - name: 🔍 Show changes
        if: steps.detect.outputs.found == 'true'
        run: |
          echo "📋 Changes made:"
          git diff --name-only
          
          if git diff --quiet; then
            echo "ℹ️ No changes were needed"
          else
            echo "📝 Files modified:"
            git diff --stat
          fi
          
      - name: 💾 Commit workflow fixes
        if: steps.detect.outputs.found == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "Fabrikam Auto-Fix Bot 🤖"
          
          # Check if there are changes to commit
          if ! git diff --quiet; then
            echo "💾 Committing workflow fixes..."
            
            git add .github/workflows/
            
            git commit -m "🤖 Auto-fix CI/CD workflows for monorepo structure - Applied CIPP-inspired optimizations: Fixed .NET build paths, updated project references, enabled Azure deployment - Fixed ${{ env.FIXED_COUNT }} workflow(s) automatically"
            
            echo "📤 Pushing changes..."
            git push
            
            echo "🎉 Successfully auto-fixed CI/CD workflows!"
            echo ""
            echo "✅ Your workflows are now optimized for monorepo deployment"
            echo "🚀 Next deployment should work perfectly!"
            
          else
            echo "ℹ️ No workflow fixes were needed - everything looks good!"
          fi
          
      - name: 📊 Summary
        if: always()
        run: |
          echo "🏁 Auto-Fix CI/CD Summary:"
          echo "=========================="
          
          if [ "${{ steps.detect.outputs.found }}" = "true" ]; then
            echo "✅ Azure Portal workflows detected"
            echo "🔧 Fixes applied: ${{ env.FIXED_COUNT }}"
            echo "📁 Workflows checked: $(echo '${{ steps.detect.outputs.workflows }}' | wc -w)"
          else
            echo "ℹ️ No Azure Portal workflows found to fix"
          fi
          
          echo ""
          echo "🎯 This automation ensures your CI/CD workflows work perfectly"
          echo "   with the Fabrikam monorepo structure, following CIPP's"
          echo "   proven deployment patterns that enabled 9000+ successful deployments!"
